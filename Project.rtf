{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 #include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
#include <ctype.h>\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 void convert(const char*);\
int opCode(const char*);\
void hexToBinary(const char*, char*);\
void extractHexNumber(const char*, char*);\
void toBinary(int, int, char*);\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 int main() \{\
\'a0 \'a0 convert("TestCase1.asm");\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 void convert(const char* asmFile) \{\
\'a0 \'a0 char binFile[100];\
\'a0 \'a0 FILE *assembly = fopen(asmFile, "r");\
\'a0 \'a0 if (!assembly) \{\
\'a0 \'a0 \'a0 \'a0 printf("Error opening %s\\n", asmFile);\
\'a0 \'a0 \'a0 \'a0 exit(1);\
\'a0 \'a0 \}\
\'a0 \'a0\'a0\
\'a0 \'a0 strcpy(binFile, asmFile);\
\'a0 \'a0 char *dot = strrchr(binFile, '.');\
\'a0 \'a0 if (dot) strcpy(dot, ".bin");\
\'a0 \'a0 else strcat(binFile, ".bin");\
\'a0 \'a0\'a0\
\'a0 \'a0 FILE *binary = fopen(binFile, "w");\
\'a0 \'a0 if (!binary) \{\
\'a0 \'a0 \'a0 \'a0 printf("Error creating %s\\n", binFile);\
\'a0 \'a0 \'a0 \'a0 fclose(assembly);\
\'a0 \'a0 \'a0 \'a0 exit(1);\
\'a0 \'a0 \}\
\'a0 \'a0\'a0\
\'a0 \'a0 char buffer[100];\
\'a0 \'a0 while (fgets(buffer, sizeof(buffer), assembly)) \{\
\'a0 \'a0 \'a0 \'a0 char binaryCode[17] = \{0\};\
\'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 if (strstr(buffer, ".ORIG")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 char hex[10];\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 extractHexNumber(buffer, hex);\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 hexToBinary(hex, binaryCode);\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, "LD")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "0010");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "000");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "000000110");\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, "ST")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "0011");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "011");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "000000100");\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, "ADD")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "0001");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "011");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "001000000");\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, "HALT")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "1111");\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcat(binaryCode, "000000000000");\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, ".FILL")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 char hex[10];\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 extractHexNumber(buffer, hex);\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 hexToBinary(hex, binaryCode);\
\'a0 \'a0 \'a0 \'a0 \} else if (strstr(buffer, ".END")) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 strcpy(binaryCode, "");\
\'a0 \'a0 \'a0 \'a0 \}\
\'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 if (strlen(binaryCode) > 0) \{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 fprintf(binary, "%s\\n", binaryCode);\
\'a0 \'a0 \'a0 \'a0 \}\
\'a0 \'a0 \}\
\'a0 \'a0\'a0\
\'a0 \'a0 fclose(assembly);\
\'a0 \'a0 fclose(binary);\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 void hexToBinary(const char* hex, char* binary) \{\
\'a0 \'a0 const char* lookup[16] = \{\
\'a0 \'a0 \'a0 \'a0 "0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",\
\'a0 \'a0 \'a0 \'a0 "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"\
\'a0 \'a0 \};\
\'a0 \'a0 binary[0] = '\\0';\
\'a0 \'a0 for (int i = 0; hex[i] != '\\0'; i++) \{\
\'a0 \'a0 \'a0 \'a0 char c = toupper(hex[i]);\
\'a0 \'a0 \'a0 \'a0 if (c >= '0' && c <= '9') strcat(binary, lookup[c - '0']);\
\'a0 \'a0 \'a0 \'a0 else if (c >= 'A' && c <= 'F') strcat(binary, lookup[c - 'A' + 10]);\
\'a0 \'a0 \}\
\}\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 void extractHexNumber(const char *str, char *hexNumber) \{\
\'a0 \'a0 const char *ptr = strchr(str, 'x');\
\'a0 \'a0 if (ptr) strcpy(hexNumber, ptr + 1);\
\'a0 \'a0 else hexNumber[0] = '\\0';\
\}\
}